/* automatically generated by rust-bindgen */
#![allow(non_camel_case_types)]

pub const MAGIC_NONE: u32 = 0;
pub const MAGIC_DEBUG: u32 = 1;
pub const MAGIC_SYMLINK: u32 = 2;
pub const MAGIC_COMPRESS: u32 = 4;
pub const MAGIC_DEVICES: u32 = 8;
pub const MAGIC_MIME_TYPE: u32 = 16;
pub const MAGIC_CONTINUE: u32 = 32;
pub const MAGIC_CHECK: u32 = 64;
pub const MAGIC_PRESERVE_ATIME: u32 = 128;
pub const MAGIC_RAW: u32 = 256;
pub const MAGIC_ERROR: u32 = 512;
pub const MAGIC_MIME_ENCODING: u32 = 1024;
pub const MAGIC_MIME: u32 = 1040;
pub const MAGIC_APPLE: u32 = 2048;
pub const MAGIC_EXTENSION: u32 = 16777216;
pub const MAGIC_COMPRESS_TRANSP: u32 = 33554432;
pub const MAGIC_NODESC: u32 = 16780304;
pub const MAGIC_NO_CHECK_COMPRESS: u32 = 4096;
pub const MAGIC_NO_CHECK_TAR: u32 = 8192;
pub const MAGIC_NO_CHECK_SOFT: u32 = 16384;
pub const MAGIC_NO_CHECK_APPTYPE: u32 = 32768;
pub const MAGIC_NO_CHECK_ELF: u32 = 65536;
pub const MAGIC_NO_CHECK_TEXT: u32 = 131072;
pub const MAGIC_NO_CHECK_CDF: u32 = 262144;
pub const MAGIC_NO_CHECK_TOKENS: u32 = 1048576;
pub const MAGIC_NO_CHECK_ENCODING: u32 = 2097152;
pub const MAGIC_SNPRINTB : & 'static [ u8 ; 503usize ] = b"\x7F\x10\\\nb\\0debug\\0\\\nb\\1symlink\\0\\\nb\\2compress\\0\\\nb\\3devices\\0\\\nb\\4mime_type\\0\\\nb\\5continue\\0\\\nb\\6check\\0\\\nb\\7preserve_atime\\0\\\nb\\10raw\\0\\\nb\\11error\\0\\\nb\\12mime_encoding\\0\\\nb\\13apple\\0\\\nb\\14no_check_compress\\0\\\nb\\15no_check_tar\\0\\\nb\\16no_check_soft\\0\\\nb\\17no_check_sapptype\\0\\\nb\\20no_check_elf\\0\\\nb\\21no_check_text\\0\\\nb\\22no_check_cdf\\0\\\nb\\23no_check_reserved0\\0\\\nb\\24no_check_tokens\\0\\\nb\\25no_check_encoding\\0\\\nb\\26no_check_reserved1\\0\\\nb\\27no_check_reserved2\\0\\\nb\\30extension\\0\\\nb\\31transp_compression\\0\\\n\0" ;
pub const MAGIC_NO_CHECK_ASCII: u32 = 131072;
pub const MAGIC_NO_CHECK_FORTRAN: u32 = 0;
pub const MAGIC_NO_CHECK_TROFF: u32 = 0;
pub const MAGIC_VERSION: u32 = 533;
pub const MAGIC_PARAM_INDIR_MAX: u32 = 0;
pub const MAGIC_PARAM_NAME_MAX: u32 = 1;
pub const MAGIC_PARAM_ELF_PHNUM_MAX: u32 = 2;
pub const MAGIC_PARAM_ELF_SHNUM_MAX: u32 = 3;
pub const MAGIC_PARAM_ELF_NOTES_MAX: u32 = 4;
pub const MAGIC_PARAM_REGEX_MAX: u32 = 5;
pub const MAGIC_PARAM_BYTES_MAX: u32 = 6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct magic_set {
    _unused: [u8; 0],
}
pub type magic_t = *mut magic_set;
extern "C" {
    pub fn magic_open(arg1: ::std::os::raw::c_int) -> magic_t;
}
extern "C" {
    pub fn magic_close(arg1: magic_t);
}
extern "C" {
    pub fn magic_getpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn magic_file(
        arg1: magic_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn magic_descriptor(
        arg1: magic_t,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn magic_buffer(
        arg1: magic_t,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn magic_error(arg1: magic_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn magic_getflags(arg1: magic_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn magic_setflags(arg1: magic_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn magic_version() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn magic_load(arg1: magic_t, arg2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn magic_load_buffers(
        arg1: magic_t,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: *mut usize,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn magic_compile(
        arg1: magic_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn magic_check(arg1: magic_t, arg2: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn magic_list(arg1: magic_t, arg2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn magic_errno(arg1: magic_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn magic_setparam(
        arg1: magic_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn magic_getparam(
        arg1: magic_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
